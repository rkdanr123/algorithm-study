#include <stdio.h>
#define MAX 20

int dp[MAX][MAX][MAX];
int arr[MAX][MAX];
int N;

int slope(int i, int j);
int right(int i, int j);
int down(int i, int j);

int slope(int i, int j){
    if(i<0 || j<0) { return 0; }
    if(dp[i][j][0] != -1) { return dp[i][j][0]; }
    if(j == 0) { return 0; }
    
    dp[i][j][0] = 0;
    
    if(i == 0){
        if(!(arr[i][j])) {
            dp[i][j][0] += right(i, j - 1);
            return dp[i][j][0];
        }
    }
    if (arr[i][j]){return 0;}
    if(arr[i - 1][j]) {
        dp[i][j][0] += right(i, j - 1);
        return dp[i][j][0];
    }
    
    if(arr[i][j - 1]) {
        dp[i][j][0] += down(i - 1, j);
        return dp[i][j][0];
    }
    
    if(!(arr[i - 1][j] || arr[i][j] || arr[i][j - 1])) {
        dp[i][j][0] += slope(i - 1, j - 1) + right(i, j - 1) + down(i - 1, j);
        return dp[i][j][0];
    }
    
    return 0;
}

int right(int i, int j){
    if(i < 0 || j < 0) { return 0; }
    if(dp[i][j][1] != -1) { return dp[i][j][1]; }
    if(j <= 1) { return 0; }
    
    dp[i][j][1] = 0;
    if (arr[i][j]){return 0;}
    if(arr[i - 1][j]) {
        dp[i][j][1] += right(i, j - 1);
        return dp[i][j][1];
    }
    
    if(!(arr[i][j] || arr[i][j - 1])) {
        dp[i][j][1] += slope(i - 1, j - 1) + right(i, j - 1);
        return dp[i][j][1];
    }
    
    return 0;
}

int down(int i, int j){
    if(i < 0 || j < 0) { return 0; }
    if(dp[i][j][2] != -1) { return dp[i][j][2]; }
    if(i == 0) { return 0; }
    
    dp[i][j][2] = 0;
    if (arr[i][j]){return 0;}
    if(arr[i][j - 1]) {
        dp[i][j][2] += down(i - 1, j);
        return dp[i][j][2];
    }
    
    if(!(arr[i - 1][j] || arr[i][j])) {
        dp[i][j][2] += slope(i - 1, j - 1) + down(i - 1, j);
        return dp[i][j][2];
    }
    
    return 0;
}

int main() {
    scanf("%d", &N);
    int k;
    
    // 배열 입력 받기
    for(int i = 0; i < N; i++){
        for(int j = 0; j < N; j++){
            scanf("%d", &k);
            arr[i][j] = k;
        }
    }
    
    // dp 배열 초기화 (모든 값을 -1로 설정)
    for(int i = 0; i < N; i++){
        for(int j = 0; j < N; j++){
            dp[i][j][0] = dp[i][j][1] = dp[i][j][2] = -1;
        }
    }
    
    dp[0][0][0] = dp[0][0][1] = dp[0][0][2] = 1;
    dp[0][1][0] = dp[0][1][1] = dp[0][1][2] = 1;
    dp[1][1][0] = dp[1][1][1] = dp[1][1][2] = 0;



    
    // 결과 출력
    printf("%d\n",slope(N-1,N-1));
    /*printf("\n");
    
    for(int i = 0; i < N; i++){
        for(int j = 0; j < N; j++){
            printf("%d ", dp[i][j][0]);
        }
        printf("\n");
    }
    printf("\n");
    for(int i = 0; i < N; i++){
        for(int j = 0; j < N; j++){
            printf("%d ", dp[i][j][1]);
        }
        printf("\n");
    }
    printf("\n");
    for(int i = 0; i < N; i++){
        for(int j = 0; j < N; j++){
            printf("%d ", dp[i][j][2]);
        }
        printf("\n");
    }
    printf("\n");
    
    for(int i = 0; i < N; i++){
        for(int j = 0; j < N; j++){
            printf("%d ", arr[i][j]);
        }
        printf("\n");
    }*/
}
